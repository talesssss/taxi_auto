{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'keras'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-f9f8e87d16b7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;31m#import keras.backend.tensorflow_backend as backend\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDropout\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mConv2D\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mMaxPooling2D\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mActivation\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mFlatten\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moptimizers\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mAdam\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'keras'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "#import keras.backend.tensorflow_backend as backend\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Activation, Flatten\n",
    "from keras.optimizers import Adam\n",
    "from keras.callbacks import TensorBoard\n",
    "import tensorflow as tf\n",
    "from collections import deque\n",
    "import time\n",
    "import random\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "from PIL import Image\n",
    "import cv2\n",
    "import PIL\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "DISCOUNT = 0.99\n",
    "REPLAY_MEMORY_SIZE = 50_000  # How many last steps to keep for model training\n",
    "MIN_REPLAY_MEMORY_SIZE = 1_000  # Minimum number of steps in a memory to start training\n",
    "MINIBATCH_SIZE = 64  # How many steps (samples) to use for training\n",
    "UPDATE_TARGET_EVERY = 5  # Terminal states (end of episodes)\n",
    "MODEL_NAME = '2x256'\n",
    "MIN_REWARD = -200  # For model save\n",
    "MEMORY_FRACTION = 0.20\n",
    "\n",
    "# Environment settings\n",
    "EPISODES = 30_000\n",
    "\n",
    "# Exploration settings\n",
    "epsilon = 1  # not a constant, going to be decayed\n",
    "EPSILON_DECAY =0.99985\n",
    "MIN_EPSILON = 0.001\n",
    "\n",
    "#  Stats settings\n",
    "AGGREGATE_STATS_EVERY = 50 # episodes\n",
    "SHOW_PREVIEW = False\n",
    "\n",
    "lista = []\n",
    "\n",
    "class Blob:\n",
    "    \n",
    "\n",
    "    def __init__(self, size):\n",
    "        self.size = size\n",
    "      \n",
    "        posicao = []\n",
    "        for x in range (10):\n",
    "            for y in range (10):\n",
    "                posicao.append((x,y))\n",
    "        calcada = [(0,1),(1,2),(2,2),(2,3),(2,5),(3,6),(4,2),(5,2),(6,3),(7,0),(7,1),(8,2),(4,1),(1,6),(2,6),\n",
    "                           (4,6),(5,6),(6,6),(7,6),(1,8),(2,8),(3,8),(4,8),(5,8),(8,8),(7,8),(0,9),(0,8),(8,9),(4,3),(4,4),(6,4)]\n",
    "        pedagio = [(6,8),(4,0),(8,5)]\n",
    "       \n",
    "        for coord in calcada:\n",
    "            if coord in posicao:\n",
    "                posicao.remove(coord)\n",
    "                \n",
    "        for coord in pedagio:\n",
    "            if coord in posicao:\n",
    "                posicao.remove(coord)\n",
    "                \n",
    "        origem_taxi = posicao[random.randint(0, len(posicao)-1)]\n",
    "        self.x = origem_taxi[0]\n",
    "        self.y = origem_taxi[1]\n",
    "        \n",
    "        posicao.remove(origem_taxi)\n",
    "        origem_passageiro = posicao[random.randint(0, len(posicao)-1)]\n",
    "        self.xP = origem_passageiro[0]\n",
    "        self.yP = origem_passageiro[1]\n",
    "        \n",
    "        posicao.remove(origem_passageiro)\n",
    "        origem_destino = posicao[random.randint(0, len(posicao)-1)]\n",
    "        self.xd = origem_destino[0]\n",
    "        self.yd = origem_destino[1]\n",
    "    \n",
    "    \n",
    "    def __str__(self):\n",
    "        return f\"Blob ({self.x}, {self.y})\"\n",
    "\n",
    "    def __sub__(self, other):\n",
    "        return (self.x-other.x, self.y-other.y)\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        return self.x == other.x and self.y == other.y\n",
    "      \n",
    "        #for i in calcada:\n",
    "            #return self.x == calcada[0] and self.y == calcada[1]\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    def action(self, choice):\n",
    "        '''\n",
    "        Gives us 9 total movement options. (0,1,2,3,4,5,6,7,8)\n",
    "        '''\n",
    "        if choice == 0:\n",
    "            self.move(x=1, y=1)\n",
    "        elif choice == 1:\n",
    "            self.move(x=-1, y=-1)\n",
    "        elif choice == 2:\n",
    "            self.move(x=-1, y=1)\n",
    "        elif choice == 3:\n",
    "            self.move(x=1, y=-1)\n",
    "        elif choice == 4:\n",
    "            self.move(x=1, y=0)\n",
    "        elif choice == 5:\n",
    "            self.move(x=-1, y=0)\n",
    "        elif choice == 6:\n",
    "            self.move(x=0, y=1)\n",
    "        elif choice == 7:\n",
    "            self.move(x=0, y=-1)\n",
    "        elif choice == 8:\n",
    "            self.move(x=0, y=0)\n",
    "\n",
    "    def move(self, x=False, y=False):\n",
    "\n",
    "        # If no value for x, move randomly\n",
    "        if not x:\n",
    "            self.x += x\n",
    "        else:\n",
    "            self.x += x\n",
    "\n",
    "        # If no value for y, move randomly\n",
    "        if not y:\n",
    "            self.y += y\n",
    "        else:\n",
    "            self.y += y\n",
    "\n",
    "        # If we are out of bounds, fix!\n",
    "        if self.x < 0:\n",
    "            self.x = 0\n",
    "        elif self.x > self.size-1:\n",
    "            self.x = self.size-1\n",
    "        if self.y < 0:\n",
    "            self.y = 0\n",
    "        elif self.y > self.size-1:\n",
    "            self.y = self.size-1\n",
    "\n",
    "\n",
    "class BlobEnv:\n",
    "    SIZE = 10\n",
    "    RETURN_IMAGES = True\n",
    "    MOVE_PENALTY = 1\n",
    "    ENEMY_PENALTY = 200\n",
    "    PASSAGEIRO_REWARD = 60\n",
    "    PEDAGIO_PENALTY = 5\n",
    "    DESTINO_REWARD = 150\n",
    "    OBSERVATION_SPACE_VALUES = (SIZE, SIZE, 3)  # 4\n",
    "    ACTION_SPACE_SIZE = 9\n",
    "    PLAYER_N = 1  # player key in dict\n",
    "    PASSAGEIRO_N = 2  # passageiro key in dict\n",
    "    ENEMY_N = 3  # enemy key in dict\n",
    "    PEDAGIO_N = 4\n",
    "    DESTINO_N = 5\n",
    "    \n",
    "    # the dict! (colors)\n",
    "    d = {1: (0, 255, 255),\n",
    "         2: (255, 255, 255),\n",
    "         3: (100, 100, 100),\n",
    "         4: (0,0,150),\n",
    "         5: (0,200,0)}\n",
    "\n",
    "    def reset(self):\n",
    "        \n",
    "        self.player = Blob(self.SIZE)\n",
    "        self.passageiro = Blob(self.SIZE)\n",
    "        self.destino = Blob(self.SIZE)\n",
    "        \n",
    "        while self.passageiro == self.player:\n",
    "            self.passageiro = Blob(self.SIZE)\n",
    "            \n",
    "        while self.destino == self.player:\n",
    "            self.destino = Blob(self.SIZE)\n",
    "    \n",
    "        #self.enemy = Blob(self.SIZE)\n",
    "       # while self.enemy == self.player and self.enemy == self.passageiro :\n",
    "         #   self.enemy = Blob(self.SIZE)\n",
    "    \n",
    "\n",
    "        self.episode_step = 0\n",
    "\n",
    "        if self.RETURN_IMAGES:\n",
    "            observation = np.array(self.get_image())\n",
    "        else:\n",
    "            observation = (self.player-self.passageiro) + (self.player-self.enemy)\n",
    "        return observation\n",
    "    \n",
    "    def step(self, action):\n",
    "        \n",
    "        self.episode_step += 1\n",
    "        self.player.action(action)\n",
    "        \n",
    "        \n",
    "\n",
    "        if self.RETURN_IMAGES:\n",
    "            new_observation = np.array(self.get_image())\n",
    "        else:\n",
    "            new_observation = (self.player-self.passageiro) + (self.player-self.enemy)\n",
    "        \n",
    "        calcada = [(0,1),(1,2),(2,2),(2,3),(2,5),(3,6),(4,2),(5,2),(6,3),(7,0),(7,1),(8,2),(4,1),(1,6),(2,6),\n",
    "                           (4,6),(5,6),(6,6),(7,6),(1,8),(3,8),(4,8),(5,8),(8,8),(7,8),(0,9),(0,8),(8,9),(8,5),(4,3),(4,4),(6,4)]\n",
    "        \n",
    "        global lista\n",
    "    \n",
    "    \n",
    "        if self.player.x == self.destino.xd and self.player.y == self.destino.yd and len(lista)>0 :\n",
    "            reward = self.DESTINO_REWARD\n",
    "            \n",
    "        elif self.player.x == self.destino.xd and self.player.y == self.destino.yd and len(lista)==0 :\n",
    "            reward = -self.MOVE_PENALTY\n",
    "        \n",
    "        elif (self.player.x == 0 and self.player.y == 1) | (self.player.x == 1 and self.player.y == 2) | (self.player.x == 2 and self.player.y == 2) | (self.player.x == 2 and self.player.y == 3) |(self.player.x == 2 and self.player.y == 5) | (self.player.x == 3 and self.player.y == 6):\n",
    "            reward = -self.ENEMY_PENALTY\n",
    "            \n",
    "        elif (self.player.x == 4 and self.player.y == 2) | (self.player.x == 5 and self.player.y == 2) | (self.player.x == 6 and self.player.y == 3) | (self.player.x == 7 and self.player.y == 0) |(self.player.x == 7 and self.player.y == 1) | (self.player.x == 8 and self.player.y == 2):\n",
    "            reward = -self.ENEMY_PENALTY\n",
    "            \n",
    "        elif (self.player.x == 4 and self.player.y == 1) | (self.player.x == 1 and self.player.y == 6) | (self.player.x == 2 and self.player.y == 6) | (self.player.x == 4 and self.player.y == 6) |(self.player.x == 5 and self.player.y == 6) | (self.player.x == 6 and self.player.y == 6):\n",
    "            reward = -self.ENEMY_PENALTY\n",
    "            \n",
    "        elif (self.player.x == 7 and self.player.y == 6) | (self.player.x == 1 and self.player.y == 8) | (self.player.x == 3 and self.player.y == 8) | (self.player.x == 4 and self.player.y == 8) |(self.player.x == 5 and self.player.y == 8) | (self.player.x == 8 and self.player.y == 8):\n",
    "            reward = -self.ENEMY_PENALTY\n",
    "            \n",
    "        elif (self.player.x == 7 and self.player.y == 8) | (self.player.x == 0 and self.player.y == 9) | (self.player.x == 0 and self.player.y == 8) | (self.player.x == 8 and self.player.y == 9) | (self.player.x == 4 and self.player.y == 3):\n",
    "            reward = -self.ENEMY_PENALTY\n",
    "            \n",
    "        elif (self.player.x == 4 and self.player.y == 4) | (self.player.x == 6 and self.player.y == 4):\n",
    "            reward = -self.ENEMY_PENALTY\n",
    "        \n",
    "        elif self.player.x == self.passageiro.xP and self.player.y == self.passageiro.yP and len(lista)==0:\n",
    "            reward = self.PASSAGEIRO_REWARD\n",
    "            lista.append(1)\n",
    "            \n",
    "        elif (self.player.x == 6 and self.player.y == 8) | (self.player.x == 4 and self.player.y == 0) | (self.player.x == 8 and self.player.y == 5):\n",
    "            reward = -self.PEDAGIO_PENALTY\n",
    "        \n",
    "        else:\n",
    "            reward = -self.MOVE_PENALTY\n",
    "\n",
    "        done = False\n",
    "        \n",
    "        if reward == self.DESTINO_REWARD or reward == -self.ENEMY_PENALTY or self.episode_step >= 200:\n",
    "            lista.clear()\n",
    "            done = True\n",
    "        \n",
    "        #print(lista)\n",
    "        \n",
    "        return new_observation, reward, done\n",
    "\n",
    "\n",
    "    \n",
    "    def render(self):\n",
    "        img = self.get_image()\n",
    "        img = img.resize((10, 10),PIL.Image.NEAREST)  # resizing so we can see our agent in all its glory.\n",
    "        cv2.imshow(\"image\", np.array(img))  # show it!\n",
    "        cv2.waitKey(1)\n",
    "\n",
    "    # FOR CNN #\n",
    "    def get_image(self):\n",
    "        \n",
    "        calcada = [(0,1),(1,2),(2,2),(2,3),(2,5),(3,6),(4,2),(5,2),(6,3),(7,0),(7,1),(8,2),(4,1),(1,6),(2,6),\n",
    "                           (4,6),(5,6),(6,6),(7,6),(1,8),(3,8),(4,8),(5,8),(8,8),(7,8),(0,9),(0,8),(8,9),(4,3),(4,4),(6,4)]\n",
    "        pedagio = [(6,8),(4,0),(8,5)]\n",
    "    \n",
    "        env = np.zeros((self.SIZE, self.SIZE, 3), dtype=np.uint8)  # starts an rbg of our size\n",
    "        #env[self.passageiro.x][self.passageiro.y] = self.d[self.passageiro_N]  # sets the passageiro location tile to green color\n",
    "        env[self.passageiro.xP][self.passageiro.yP] = self.d[self.PASSAGEIRO_N]  # sets the passageiro location tile to green color\n",
    "        for i in calcada:\n",
    "            env[i[0]][i[1]] = self.d[self.ENEMY_N]\n",
    "        env[self.player.x][self.player.y] = self.d[self.PLAYER_N]  # sets the player tile to blue\n",
    "       \n",
    "        for i in pedagio:\n",
    "            env[i[0]][i[1]] = self.d[self.PEDAGIO_N]\n",
    "            \n",
    "        env[self.destino.xd][self.destino.yd] = self.d[self.DESTINO_N]  # sets the passageiro location tile to green color\n",
    "     \n",
    "        img = Image.fromarray(env, 'RGB')  # reading to rgb. Apparently. Even tho color definitions are bgr. ???\n",
    "        return img\n",
    "\n",
    "\n",
    "env = BlobEnv()\n",
    "\n",
    "# For stats\n",
    "ep_rewards = [-200]\n",
    "\n",
    "# For more repetitive results\n",
    "random.seed(1)\n",
    "np.random.seed(1)\n",
    "tf.random.set_seed(1)\n",
    "#tf.set_random_seed(1)\n",
    "\n",
    "# Memory fraction, used mostly when trai8ning multiple agents\n",
    "#gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=MEMORY_FRACTION)\n",
    "#backend.set_session(tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)))\n",
    "\n",
    "# Create models folder\n",
    "if not os.path.isdir('models'):\n",
    "    os.makedirs('models')\n",
    "\n",
    "\n",
    "# Own Tensorboard class\n",
    "class ModifiedTensorBoard(TensorBoard):\n",
    "    def __init__(self, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        self.step = 1\n",
    "        self.writer = tf.summary.create_file_writer(self.log_dir)\n",
    "        self._log_write_dir = self.log_dir\n",
    "\n",
    "    def set_model(self, model):\n",
    "        self.model = model\n",
    "\n",
    "        self._train_dir = os.path.join(self._log_write_dir, 'train')\n",
    "        self._train_step = self.model._train_counter\n",
    "\n",
    "        self._val_dir = os.path.join(self._log_write_dir, 'validation')\n",
    "        self._val_step = self.model._test_counter\n",
    "\n",
    "        self._should_write_train_graph = False\n",
    "\n",
    "    def on_epoch_end(self, epoch, logs=None):\n",
    "        self.update_stats(**logs)\n",
    "\n",
    "    def on_batch_end(self, batch, logs=None):\n",
    "        pass\n",
    "\n",
    "    def on_train_end(self, _):\n",
    "        pass\n",
    "\n",
    "    def update_stats(self, **stats):\n",
    "        with self.writer.as_default():\n",
    "            for key, value in stats.items():\n",
    "                tf.summary.scalar(key, value, step = self.step)\n",
    "                self.writer.flush()                \n",
    "\n",
    "   \n",
    "        \n",
    "# Agent class\n",
    "class DQNAgent:\n",
    "    def __init__(self):\n",
    "\n",
    "        # Main model\n",
    "        self.model = self.create_model()\n",
    "\n",
    "        # Target network\n",
    "        self.target_model = self.create_model()\n",
    "        self.target_model.set_weights(self.model.get_weights())\n",
    "\n",
    "        # An array with last n steps for training\n",
    "        self.replay_memory = deque(maxlen=REPLAY_MEMORY_SIZE)\n",
    "\n",
    "        # Custom tensorboard object\n",
    "        self.tensorboard = ModifiedTensorBoard(log_dir=\"logs/fit/{}-{}\".format(MODEL_NAME, int(time.time())))\n",
    "\n",
    "        # Used to count when to update target network with main network's weights\n",
    "        self.target_update_counter = 0\n",
    "\n",
    "    def create_model(self):\n",
    "        model = Sequential()\n",
    "\n",
    "        model.add(Conv2D(256, (3, 3), input_shape=env.OBSERVATION_SPACE_VALUES))  # OBSERVATION_SPACE_VALUES = (10, 10, 3) a 10x10 RGB image.\n",
    "        model.add(Activation('relu'))\n",
    "        model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "        model.add(Dropout(0.2))\n",
    "\n",
    "        model.add(Conv2D(256, (3, 3)))\n",
    "        model.add(Activation('relu'))\n",
    "        model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "        model.add(Dropout(0.2))\n",
    "\n",
    "        model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\n",
    "        model.add(Dense(64))\n",
    "\n",
    "        model.add(Dense(env.ACTION_SPACE_SIZE, activation='linear'))  # ACTION_SPACE_SIZE = how many choices (9)\n",
    "        model.compile(loss=\"mse\", optimizer=Adam(lr=0.001), metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    # Adds step's data to a memory replay array\n",
    "    # (observation space, action, reward, new observation space, done)\n",
    "    def update_replay_memory(self, transition):\n",
    "        self.replay_memory.append(transition)\n",
    "\n",
    "    # Trains main network every step during episode\n",
    "    def train(self, terminal_state, step):\n",
    "\n",
    "        # Start training only if certain number of samples is already saved\n",
    "        if len(self.replay_memory) < MIN_REPLAY_MEMORY_SIZE:\n",
    "            return\n",
    "\n",
    "        # Get a minibatch of random samples from memory replay table\n",
    "        minibatch = random.sample(self.replay_memory, MINIBATCH_SIZE)\n",
    "\n",
    "        # Get current states from minibatch, then query NN model for Q values\n",
    "        current_states = np.array([transition[0] for transition in minibatch])/255\n",
    "        current_qs_list = self.model.predict(current_states)\n",
    "\n",
    "        # Get future states from minibatch, then query NN model for Q values\n",
    "        # When using target network, query it, otherwise main network should be queried\n",
    "        new_current_states = np.array([transition[3] for transition in minibatch])/255\n",
    "        future_qs_list = self.target_model.predict(new_current_states)\n",
    "\n",
    "        X = []\n",
    "        y = []\n",
    "\n",
    "        # Now we need to enumerate our batches\n",
    "        for index, (current_state, action, reward, new_current_state, done) in enumerate(minibatch):\n",
    "\n",
    "            # If not a terminal state, get new q from future states, otherwise set it to 0\n",
    "            # almost like with Q Learning, but we use just part of equation here\n",
    "            if not done:\n",
    "                max_future_q = np.max(future_qs_list[index])\n",
    "                new_q = reward + DISCOUNT * max_future_q\n",
    "            else:\n",
    "                new_q = reward\n",
    "\n",
    "            # Update Q value for given state\n",
    "            current_qs = current_qs_list[index]\n",
    "            current_qs[action] = new_q\n",
    "\n",
    "            # And append to our training data\n",
    "            X.append(current_state)\n",
    "            y.append(current_qs)\n",
    "\n",
    "        # Fit on all samples as one batch, log only on terminal state\n",
    "        self.model.fit(np.array(X)/255, np.array(y), batch_size=MINIBATCH_SIZE, verbose=0, shuffle=False, callbacks=[self.tensorboard] if terminal_state else None)\n",
    "\n",
    "        # Update target network counter every episode\n",
    "        if terminal_state:\n",
    "            self.target_update_counter += 1\n",
    "\n",
    "        # If counter reaches set value, update target network with weights of main network\n",
    "        if self.target_update_counter > UPDATE_TARGET_EVERY:\n",
    "            self.target_model.set_weights(self.model.get_weights())\n",
    "            self.target_update_counter = 0\n",
    "\n",
    "    # Queries main network for Q values given current observation space (environment state)\n",
    "    def get_qs(self, state):\n",
    "        return self.model.predict(np.array(state).reshape(-1, *state.shape)/255)[0]\n",
    "\n",
    "\n",
    "agent = DQNAgent()\n",
    "\n",
    "# Iterate over episodes\n",
    "for episode in tqdm(range(1, EPISODES + 1), ascii=True, unit='episodes'):\n",
    "\n",
    "    # Update tensorboard step every episode\n",
    "    agent.tensorboard.step = episode\n",
    "\n",
    "    # Restarting episode - reset episode reward and step number\n",
    "    episode_reward = 0\n",
    "    step = 1\n",
    "\n",
    "    # Reset environment and get initial state\n",
    "    current_state = env.reset()\n",
    "\n",
    "    # Reset flag and start iterating until episode ends\n",
    "    done = False\n",
    "    while not done:\n",
    "\n",
    "        # This part stays mostly the same, the change is to query a model for Q values\n",
    "        if np.random.random() > epsilon:\n",
    "            # Get action from Q table\n",
    "            action = np.argmax(agent.get_qs(current_state))\n",
    "        else:\n",
    "            # Get random action\n",
    "            action = np.random.randint(0, env.ACTION_SPACE_SIZE)\n",
    "\n",
    "        new_state, reward, done = env.step(action)\n",
    "\n",
    "        # Transform new continous state to new discrete state and count reward\n",
    "        episode_reward += reward\n",
    "\n",
    "        if SHOW_PREVIEW and not episode % AGGREGATE_STATS_EVERY:\n",
    "            env.render()\n",
    "\n",
    "        # Every step we update replay memory and train main network\n",
    "        agent.update_replay_memory((current_state, action, reward, new_state, done))\n",
    "        agent.train(done, step)\n",
    "\n",
    "        current_state = new_state\n",
    "        step += 1\n",
    "\n",
    "    # Append episode reward to a list and log stats (every given number of episodes)\n",
    "    ep_rewards.append(episode_reward)\n",
    "    if not episode % AGGREGATE_STATS_EVERY or episode == 1:\n",
    "        average_reward = sum(ep_rewards[-AGGREGATE_STATS_EVERY:])/len(ep_rewards[-AGGREGATE_STATS_EVERY:])\n",
    "        min_reward = min(ep_rewards[-AGGREGATE_STATS_EVERY:])\n",
    "        max_reward = max(ep_rewards[-AGGREGATE_STATS_EVERY:])\n",
    "        agent.tensorboard.update_stats(reward_avg=average_reward, reward_min=min_reward, reward_max=max_reward, epsilon=epsilon)\n",
    "\n",
    "        # Save model, but only when min reward is greater or equal a set value\n",
    "        #if min_reward >= MIN_REWARD:\n",
    "        agent.model.save(f'models/{MODEL_NAME}__{max_reward:_>7.2f}max_{average_reward:_>7.2f}avg_{min_reward:_>7.2f}min__{int(time.time())}.model')\n",
    "\n",
    "    # Decay epsilon\n",
    "    if epsilon > MIN_EPSILON:\n",
    "        epsilon *= EPSILON_DECAY\n",
    "        epsilon = max(MIN_EPSILON, epsilon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the TensorBoard notebook extension\n",
    "%load_ext tensorboard\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Reusing TensorBoard on port 6006 (pid 17948), started 2:12:59 ago. (Use '!kill 17948' to kill it.)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "      <iframe id=\"tensorboard-frame-4bb57b5cd3e89d32\" width=\"100%\" height=\"800\" frameborder=\"0\">\n",
       "      </iframe>\n",
       "      <script>\n",
       "        (function() {\n",
       "          const frame = document.getElementById(\"tensorboard-frame-4bb57b5cd3e89d32\");\n",
       "          const url = new URL(\"/\", window.location);\n",
       "          const port = 6006;\n",
       "          if (port) {\n",
       "            url.port = port;\n",
       "          }\n",
       "          frame.src = url;\n",
       "        })();\n",
       "      </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%tensorboard --logdir=logs/fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
